\import Arith.Int
\import Arith.Nat
\import Data.Bool
\import Data.Or
\import Function.Meta
\import Logic
\import Order.LinearOrder
\import Order.PartialOrder
\import Order.StrictOrder
\import Paths
\import Paths.Meta
\import Set

\open IntRing

\func h_c (h : Nat) (i : Nat) => h Nat.- suc i
\func i_  (h : Nat) (hc : Int) => h IntRing.+ IntRing.negative (isuc hc)

\func hc<->i (h i : Nat) : pos i = i_ h (h_c h i)
  | 0, 0 => idp
  | 0, suc i => idp
  | suc h, 0 => rewrite
      (pmap (pos (suc h) IntRing.+) (idp : IntRing.negative (isuc 0) = -1))
      (hc<->i-lemma h : pos 0 = suc h Nat.- suc h)
  -- TODO
  | suc h, suc i =>
    (
      rewrite isuc=+1 {?}
      : pos (suc i) = suc h IntRing.+ IntRing.negative (isuc (h_c (suc h) (suc i)))
    )
  \where {
    \func isuc=+1{a : Int} : isuc a = 1 IntRing.+ a \elim a
      | pos n => idp
      | neg 0 => idp
      | neg (suc h) => idp

    \func hc<->i-lemma (h : Nat) : pos 0 = h Nat.- h \elim h
      | 0 => idp
      | suc h => hc<->i-lemma h
  }

\func max (a b : Nat) : Nat \elim a, b
  | 0, 0 => 0
  | 0, suc b1 => suc b1
  | suc a1, 0 => suc a1
  | suc a1, suc b1 => suc (max a1 b1)
  \where {
    \func max-0-0 : max 0 0 = 0 => \case max 0 0 \with {
      | 0 => idp
      | suc n => idp
    }
    \func max-sym (a b : Nat) : max a b = max b a \elim a, b
      | 0, 0 => idp
      | 0, suc b => idp
      | suc a, 0 => idp
      | suc a, suc b => pmap suc (max-sym a b)
    -- жесть осознал вещи
    \func a<=b->max=b (a b : Nat) (p : a <= b) : max a b = b \elim a, b
      | 0, 0 => max-0-0
      | 0, suc b => idp
      | suc a, 0 => absurd (suc/=0 (<=-antisymmetric p (zero<=_ {suc a})))
      | suc a, suc b => pmap suc (a<=b->max=b a b (suc<=suc.conv p))

    \func maxa_b=avb {a b : Nat} : (max a b = a) || (max a b = b) =>
      \case NatSemiring.totality a b \with {
        | byLeft a<=b => byRight (a<=b->max=b a b a<=b)
        | byRight b<=a => byLeft (rewriteF (max-sym b a) (a<=b->max=b b a b<=a))
      }

    \func a_b<=max {a b : Nat} : \Sigma (a <= max a b) (b <= max a b) =>
      \case NatSemiring.totality a b \with {
        | byLeft a<=b => \let
          | b_<=_max_a_b => NatSemiring.<=_= (inv (a<=b->max=b a b a<=b))
                         \in (<=∘ a<=b b_<=_max_a_b, b_<=_max_a_b)
        | byRight b<=a => \let
          | a_<=_max_b_a => NatSemiring.<=_= (inv (a<=b->max=b b a b<=a))
          | a_<=_max_a_b => <=∘ a_<=_max_b_a (NatSemiring.<=_= (max-sym b a))
                          \in (a_<=_max_a_b , <=∘ b<=a a_<=_max_a_b )
      }
    \func max-monotone {a b a' b' : Nat} (a<a' : a < a') (b<b' : b < b') : max a b < max a' b' =>
      \case totality a b \with {
        | byLeft a<=b => <=-<-transitive
            (NatSemiring.<=_= (a<=b->max=b a b a<=b))
            (<-<=-transitive b<b' (a_b<=max {a'} {b'}).2)
        | byRight b<=a =>
          rewrite (max-sym a' b') $
          rewrite (max-sym a b) $
            <=-<-transitive
              (NatSemiring.<=_= (a<=b->max=b b a b<=a))
              (<-<=-transitive a<a' (a_b<=max {b'} {a'}).2)
      }
  }

\func <-<=-transitive {a b c : Nat} (a<b : a < b) (b<=c : b <= c) : a < c =>
  \case LinearOrder.<=-dec b<=c \with {
    | inl b<c => NatSemiring.<-transitive a<b b<c
    | inr b=c => rewriteF b=c a<b
  }

\func <=-<-transitive {a b c : Nat} (a<=b : a <= b) (b<c : b < c) : a < c =>
  \case LinearOrder.<=-dec a<=b \with {
    | inl a<b => NatSemiring.<-transitive a<b b<c
    | inr a=b => rewriteF (inv a=b) b<c
  }

\func split-max {c a b : Nat} (p : c = max a b) : (c = a) || (c = b) =>
  \case max.maxa_b=avb {a} {b} \with {
    | byLeft max=a => byLeft (p *> max=a)
    | byRight max=b => byRight (p *> max=b)
  }

\func if-left {A : \Type}  (a b : A) : if true a b = a => idp
\func if-right {A : \Type} (a b : A) : if false a b = b => idp
\func =->== {a b : Nat} (p : a = b) : a == b = true => \case decideEq a b \as p \return decToBool p = true \with {
  | yes e => idp
  | no n => absurd $ n p
}

\func ==->= {T : \Set} {d : DecSet T} {a b : T} (p : a == b = true) : a = b => \case d.decideEq a b \as d, p : decToBool d = true \with {
  | yes e, _ => e
  | no n, p => absurd (true/=false (inv p))
}

\func and=>bothTrue {a b : Bool} (p : a and b = true) : \Sigma (a = true) (b = true) \elim a, b, p
  | false, false, ()
  | true, true, p => (idp, idp)

\func /=->/== {a b : Nat} (p : Not(a = b)) : a == b = false => \case decideEq a b \as p \return decToBool p = false \with {
  | yes e => absurd $ p e
  | no n => idp
}

\func pmap3 {A B C D : \Type} (f : A -> B -> C -> D) {a a' : A} (p : a = a') {b b' : B} (q : b = b') (c c' : C) (k : c = c') : f a b c = f a' b' c'
  => path (\lam i => f (p @ i) (q @ i) (k @ i))
