\import Arith.Nat
\import Data.Array (filter)
\import Data.Bool
\import Data.Array
\import Data.Fin (fsuc)
\import Data.Maybe
\import Data.Or
\import Function.Meta ($)
\import Logic
\import Paths
\import Paths.Meta
\import Relation.Equivalence
\import Set
\import math.utils
\open ArrayUtils

\use \coerce set {T : \Set} (x : T) : Set T => in~ (x :: nil)
  \where {
    \func extract {T : \Set} {d : DecSet T} (x : T) : \Pi (y : T) (y in set x) -> y = x =>
      \lam y i => \case decideEq x y \as dec, i : if (decToBool dec) true false = true \with {
        | yes e, p => inv e
      }
  }

\func \infix 4 ~ {T : \Set} (a b : Array T) => \Sigma
  (\Pi (x : T) (Index x a) -> Index x b)
  (\Pi (x : T) (Index x b) -> Index x a)
  \where {
    \func ref {T : \Set} {a : Array T} : a ~ a =>
      (\lam x i => i, \lam x i => i)

    \func sym {T : \Set} {a b : Array T} : (a ~ b) -> (b ~ a) =>
      \lam a~b => (\lam x i => a~b.2 x i, \lam x i => a~b.1 x i)

    \func trans {T : \Set} {a b c : Array T} : (a ~ b) -> (b ~ c) -> (a ~ c) =>
      \lam a~b b~c => (\lam x i => b~c.1 x (a~b.1 x i), \lam x i => a~b.2 x (b~c.2 x i))
  }

\func \infix 5 in {T : \Set} {d : DecSet T} (x : T) (s : Set T) => Set.inSet x s = true

\func \infix 4 < {T : \Set} {d : DecSet T} (a b : Set T) => \Pi (x : T) (x in a) -> x in b

\func \infix 4 <> {T : \Set} {d : DecSet T} (a b : Set T) => \Sigma (a < b) (b < a)

\func Set (T : \Set) => Quotient {Array T} (\lam a b => a ~ b)
  \where {
    \func size {T : \Set} {d : DecSet T} (s : Set T) : Nat \elim s
      | in~ a => DArray.len {unique-array a}
      | ~-equiv x y r => unique-array.same-size x y r

    \func set-equlity {T : \Set} {d : DecSet T} {a b : Set T} (a<>b : a <> b) : a = b \elim a, b
      | in~ a, in~ b => path
          (
            ~-equiv
                a
                b
                (
                  (
                    \lam x i => inArray_index x b (a<>b.1 x (index_to_inArray x a i)),
                    \lam x i => inArray_index x a (a<>b.2 x (index_to_inArray x b i))
                  ) : a ~ b
                )
          )

    \func \infixl 5 ^ {T : \Set} {d : DecSet T} (a b : Set T) : Set T => filter_ (\lam e => inSet e b) a
      \where {
        \func from_inSet {T : \Set} {d : DecSet T} {x : T} (a b : Set T)
                         (both : \Sigma (x in a) (x in b))
          : x in (a ^ b) \elim a, b
          | in~ a, in~ b =>
            \let
              | index-in-A => inArray_index x a both.1
              | index-in-A^B => rewrite index-in-A.2 $
              filter-index (\lam (e : T) => inArray {T} {d} e b) a index-in-A.1 (rewrite index-in-A.2 both.2)
            \in
              index_to_inArray x (filter (\lam (e : T) => inArray {T} {d} e b) a) index-in-A^B

        \func to_inSet {T : \Set} {d : DecSet T} {x : T} (a b : Set T)
                       (xInA^B : x in (a ^ b))
          : \Sigma (x in a) (x in b) \elim a, b
          | in~ a, in~ b =>
            \let index-ab => inArray_index x (filter (\lam (e : T) => inArray {T} {d} e b) a) xInA^B \in
              (
                index_to_inArray x a (filter_contains a x index-ab),
                rewrite (inv index-ab.2) $ filter-sat (\lam (e : T) => inArray {T} {d} e b) a index-ab.1
              )

        \func ide {T : \Set} {d : DecSet T} (a : Set T) : a ^ a = a => set-equlity
            (
              \lam x i => (to_inSet a a i).1,
              \lam x i => from_inSet a a (i, i)
            )

        \func comm {T : \Set} {d : DecSet T} (a b : Set T) : a ^ b = b ^ a => set-equlity
            (
              \lam x i => from_inSet b a ((to_inSet a b i).2, (to_inSet a b i).1),
              \lam x i => from_inSet a b ((to_inSet b a i).2, (to_inSet b a i).1)
            )

        \func asoc {T : \Set} {d : DecSet T} (a b c : Set T) : (a ^ b) ^ c = a ^ (b ^ c) => set-equlity
            (
              \lam x i =>
                  \let
                    | (inAB, inC) => to_inSet (a ^ b) c i
                    | (inA, inB) => to_inSet a b inAB
                  \in from_inSet a (b ^ c) (inA, from_inSet b c (inB, inC)),
              \lam x i =>
                  \let
                    | (inA, inBC) => to_inSet a (b ^ c) i
                    | (inB, inC) => to_inSet b c inBC
                  \in from_inSet (a ^ b) c (from_inSet a b (inA, inB), inC)
            )
      }

    \func \infixl 5 / {T : \Set} {d : DecSet T} (a b : Set T) : Set T => filter_ (\lam e => not (inSet e b)) a
      \where {
        \func from_inSet {T : \Set} {d : DecSet T} {x : T} {a b : Set T}
                         (xor : \Sigma (x in a) (Not (x in b)))
          : x in (a / b) \elim a, b
          | in~ a, in~ b =>
            \let
              | indexA => inArray_index x a xor.1
              | not-inB : inArray x b = false =>
                not-x=>false $ \lam p => xor.2 (index_to_inArray x b (inArray_index x b p))
            \in index_to_inArray x
                (filter (\lam e => not (inArray e b)) a)
                (
                  rewrite (inv indexA.2) $
                  filter-index
                      (\lam e => not (inArray e b))
                      a
                      indexA.1
                      (rewrite indexA.2 (pmap not not-inB))
                )

        \func to_inSet {T : \Set} {d : DecSet T} {x : T} {a b : Set T}
                       (xInA/B : x in (a / b))
          : \Sigma (x in a) (Not (x in b)) \elim a, b
          | in~ a, in~ b =>
            \let
              | indexA/B => inArray_index x (filter (\lam e => not (inArray e b)) a) xInA/B
              | not-inB => filter_predicate_true a x indexA/B
              | indexA => filter_contains a x (inArray_index x (filter (\lam e => not (inArray e b)) a) xInA/B)
            \in
              (index_to_inArray x a indexA, \lam i => absurd (true/=false $ inv not-inB *> pmap not i))
      }

    \func \infixl 5 u {T : \Set} (a b : Set T) : Set T \elim a, b
      | in~ a, in~ b => in~ (a ++ b)
      | in~ a, ~-equiv b1 b2 r => Quotient.fromEquality
          (
            Equivalence.cin
                (
                  \lam x i => \let orIn => distjoin-in a b1 x i \in
                    \case orIn \with {
                      | inl a1 => left-in a b2 x a1
                      | inr b => right-in a b2 x (r.1 x b)
                    },
                  \lam x i => \let orIn => distjoin-in a b2 x i \in
                    \case orIn \with {
                      | inl a1 => left-in a b1 x a1
                      | inr b => right-in a b1 x (r.2 x b)
                    }
                )
          )
      | ~-equiv a1 a2 r, in~ b => Quotient.fromEquality
          (
            Equivalence.cin
                (
                  \lam x i => \let orIn => distjoin-in a1 b x i \in
                    \case orIn \with {
                      | inl a_ => left-in a2 b x (r.1 x a_)
                      | inr b_ => right-in a2 b x b_
                    },
                  \lam x i => \let orIn => distjoin-in a2 b x i \in
                    \case orIn \with {
                      | inl a_ => left-in a1 b x (r.2 x a_)
                      | inr b_ => right-in a1 b x b_
                    }
                )
          )
      \where {
        \func from_inSet {T : \Set} {d : DecSet T} {x : T} {a b : Set T}
                         (either : Or (x in a) (x in b))
          : x in (a u b) \elim a, b
          | in~ a, in~ b => \case either \with {
            | inl inA => from_inSet-lemma-1 x a b inA
            | inr inB => from_inSet-lemma-2 x a b inB
          }
          \where {
            \func from_inSet-lemma-1 {T : \Set} {d : DecSet T}
                                     (x : T)
                                     (a : Array T)
                                     (b : Array T)
                                     (inA : x in in~ a)
              : x in in~ (a ++ b) \elim a, inA
              | nil, inA => absurd (true/=false (inv inA))
              | e :: a, inA => \let indexA => inArray_index x (e :: a) inA \in
                \case indexA \with {
                  | (0, [0]=) => index_to_inArray x (e :: a ++ b) (0, [0]=)
                  | (suc j, [j]=) =>
                    \let
                      | rec => from_inSet-lemma-1 x a b (index_to_inArray x a (j, [j]=))
                      | index-rec => inArray_index x (a ++ b) rec
                    \in index_to_inArray x (e :: a ++ b) (suc index-rec.1, index-rec.2)
                }

            \func from_inSet-lemma-2 {T : \Set} {d : DecSet T}
                                     (x : T)
                                     (a : Array T)
                                     (b : Array T)
                                     (inB : x in in~ b)
              : x in in~ (a ++ b) \elim a, inB
              | nil, inB => inB
              | e :: a, inB =>
                \let
                  | rec => from_inSet-lemma-2 x a b inB
                  | index-rec => inArray_index x (a ++ b) rec
                \in index_to_inArray x (e :: a ++ b) (suc index-rec.1, index-rec.2)
          }

        \func to_inSet {T : \Set} {d : DecSet T} {x : T} {a b : Array T}
                       (inAvB : x in (in~ a u in~ b))
          : Or (x in in~ a) (x in in~ b) \elim a, b
          | nil, nil => inl inAvB
          | nil, a :: l => inr inAvB
          | e :: a, b => \case inArray_index x ((e :: a) ++ b) inAvB \with {
            | (0, [0]=) => inl $ index_to_inArray x (e :: a) (0, [0]=)
            | (suc f,p) => \let rec => to_inSet (index_to_inArray x (a ++ b) (f, p)) \in \case rec \with {
              | inl L => \let inA => inArray_index x a L \in inl (index_to_inArray x (e :: a) (suc inA.1, inA.2))
              | inr R => inr R
            }
          }

        \func to_inSet2 {T : \Set} {d : DecSet T} {x : T} {a b : Set T}
                        (inAvB : x in (a u b))
          : Or (x in a) (x in b) \elim a, b
          | in~ nil, in~ nil => inr inAvB
          | in~ nil, in~ (a :: l) => inr inAvB
          | in~ (e :: a), in~ b => \case inArray_index x ((e :: a) ++ b) inAvB \with {
            | (0, [0]=) => inl $ index_to_inArray x (e :: a) (0, [0]=)
            | (suc f,p) => \let rec => to_inSet (index_to_inArray x (a ++ b) (f, p)) \in \case rec \with {
              | inl L => \let inA => inArray_index x a L \in inl (index_to_inArray x (e :: a) (suc inA.1, inA.2))
              | inr R => inr R
            }
          }
          | in~ nil, ~-equiv nil nil r i => inr (
            \let
              | f => \lam pp => x in Quotient.fromEquality {Array T} {~} {nil} {nil}
                               (Equivalence.cin {Array T} {~} {nil ++ nil} {nil ++ nil} (
                                 \lam (x : T) (i : Index {T} x nil) => r.1 x i,
                                 \lam (x : T) (i : Index {T} x nil) => r.2 x i)
                               ) @ pp
              | leftIn : x in in~ nil => coe2 f i inAvB left
              | rightIn : x in in~ nil => coe2 f i inAvB right
            \in
            @ {_} {leftIn} {rightIn} (absurd (true/=false (inv leftIn)) : leftIn = rightIn) i
          )
          | in~ nil, ~-equiv nil (e :: b) r i => {?}
          | in~ nil, ~-equiv b1 b2 r i => {?}
          | ~-equiv a1 a2 r i, b => {?}
          | in~ (e :: a), ~-equiv x1 y r i => {?}

        \func ide {T : \Set} {d : DecSet T} (a : Set T) : a = a u a \elim a
          | in~ a => set-equlity
              (
                \lam x i => from_inSet {T} {d} {x} {in~ a} {in~ a} (inl i),
                \lam x i => \case to_inSet {T} {d} {x} {a} {a} i \with {
                  | inl inA => inA
                  | inr inA => inA
                }
              )

        \func comm {T : \Set} {d : DecSet T} (a b : Set T) : a u b = b u a \elim a, b
          | in~ a, in~ b => set-equlity
              (
                \lam x i => \case to_inSet {T} {d} {x} {a} {b} i \with {
                  | inl a1 => from_inSet {T} {d} {x} {in~ b} {in~ a} (inr a1)
                  | inr b1 => from_inSet {T} {d} {x} {in~ b} {in~ a} (inl b1)
                },
                \lam x i => \case to_inSet {T} {d} {x} {b} {a} i \with {
                  | inl a1 => from_inSet {T} {d} {x} {in~ a} {in~ b} (inr a1)
                  | inr b1 => from_inSet {T} {d} {x} {in~ a} {in~ b} (inl b1)
                }
              )

        \func asoc {T : \Set} {d : DecSet T} (a b c : Set T) : (a u b) u c = a u (b u c) \elim a, b, c
          | in~ a, in~ b, in~ c => set-equlity
              (
                \lam x i => \case to_inSet {T} {d} {x} {a ++ b} {c} i \with {
                  | inl i1 => \case to_inSet {T} {d} {x} {a} {b} i1 \with {
                    | inl ia => from_inSet {T} {d} {x} {in~ a} {in~ (b ++ c)} (inl ia)
                    | inr ib => from_inSet {T} {d} {x} {in~ a} {in~ (b ++ c)}
                        (inr (from_inSet {T} {d} {x} {in~ b} {in~ c} (inl ib)))
                  }
                  | inr ic => from_inSet {T} {d} {x} {in~ a} {in~ (b ++ c)}
                      (inr (from_inSet {T} {d} {x} {in~ b} {in~ c} (inr ic)))
                },
                \lam x i => \case to_inSet {T} {d} {x} {a} {b ++ c} i \with {
                  | inl ia => from_inSet {T} {d} {x} {in~ (a ++ b)} {in~ c}
                      (inl (from_inSet {T} {d} {x} {in~ a} {in~ b} (inl ia)))
                  | inr i1 => \case to_inSet {T} {d} {x} {b} {c} i1 \with {
                    | inl ib => from_inSet {T} {d} {x} {in~ (a ++ b)} {in~ c}
                        (inl (from_inSet {T} {d} {x} {in~ a} {in~ b} (inr ib)))
                    | inr ic => from_inSet {T} {d} {x} {in~ (a ++ b)} {in~ c} (inr ic)
                  }
                }
              )
      }

    \func inSet {T : \Set} {d : DecSet T} (x : T) (s : Set T) : Bool \elim s
      | in~ a => inArray x a
      | ~-equiv a b (to, from) =>
        \case
          inArray x a \as x-in-a,
          inArray x b \as x-in-b,
          idp : inArray x a = x-in-a,
          idp : inArray x b = x-in-b
        \return x-in-a = x-in-b
        \with {
          | false, false, _, _ => idp
          | false, true, not-inA, inB =>
            \let
              | index-a => from x (inArray_index x b inB)
              | inA     => index_to_inArray x a index-a
            \in inv not-inA *> inA
          | true, false, inA, not-inB =>
            \let
              | index-b => to x (inArray_index x a inA)
              | inB     => index_to_inArray x b index-b
            \in inv inB *> not-inB
          | true, true, _, _ => idp
        }

    \func map_ {T1 T2 : \Set} (f : T1 -> T2) (s : Set T1) : Set T2 \elim s
      | in~ a => in~ (filterMap (\lam x => just (f x)) a)
      | ~-equiv a b r => Quotient.fromEquality
          (
            Equivalence.cin
                (
                  \lam x i =>
                      \let
                        | name => filterMap-index (\lam x => just (f x)) b
                      \in
                        {?},
                  {?}
                )
          )

    \func filter_ {T : \Set} (f : T -> Bool) (s : Set T) : Set T \elim s
      | in~ a => in~ (filter f a)
      | ~-equiv la lb (to, from) => Quotient.fromEquality
          (
            Equivalence.cin
                (
                  \lam e inFa =>
                      \let
                        | index-la => filter_contains la e inFa
                        | index-lb => to e index-la
                        | fe=true => filter_predicate_true la e inFa
                        | tmp => filter-index f lb index-lb.1 (rewrite index-lb.2 fe=true)
                      \in rewrite (inv index-lb.2) tmp,
                  \lam e inFb =>
                      \let
                        | index-lb => filter_contains lb e inFb
                        | index-la => from e index-lb
                        | fe=true => filter_predicate_true lb e inFb
                        | tmp => filter-index f la index-la.1 (rewrite index-la.2 fe=true)
                      \in rewrite (inv index-la.2) tmp
                )
          )
  }

\module ArrayUtils \where {
  \func left-in {T : \Set} (a b : Array T) : \Pi (x : T) (Index x a) -> Index x (a ++ b) \elim a
    | nil => \lam x i => absurd (\case i.1 \with {
    })
    | :: x_a a => \lam x i => \case i \with {
      | (0, inJ) => (0, inJ)
      | (suc j, inJ) =>
        \let
          | rec => left-in a b
          | (j', inJ') => rec x (j, inJ)
        \in (suc j', inJ')
    }

  \func right-in {T : \Set} (a b : Array T) : \Pi (x : T) (Index x b) -> Index x (a ++ b) \elim a
    | nil => \lam x i => i
    | :: x_a a => \lam x (j, inJ) =>
        \let
          | rec => right-in a b
          | (j', inJ') => rec x (j, inJ)
        \in (suc j', inJ')

  \func distjoin-in {T : \Set} (a b : Array T) : \Pi (x : T) (Index x (a ++ b)) -> Or (Index x a) (Index x b) \elim a
    | nil => \lam x i => inr i
    | :: x_a a => \lam x i =>
        \let
          | rec => distjoin-in a b x
        \in
          \case i \with {
            | (0, inJ) => inl (0, inJ)
            | (suc j, inJ) =>
              \let rec2 => rec (j, inJ) \in
                \case rec2 \with {
                  | inl a1 => inl (suc a1.1, a1.2)
                  | inr b1 => inr b1
                }
          }

  \func join-size {T : \Set} (a b : Array T) : DArray.len {a ++ b} = DArray.len {a} Nat.+ DArray.len {b} \elim a
    | nil => idp
    | a :: l => rewrite (join-size l b) idp

  \func filter_predicate_true {T : \Set} {f : T -> Bool} (l : Array T) (x : T) (inFiltered : Index x (filter f l)) : f x = true \elim l
    | nil => absurd (\case inFiltered.1 \with {
    })
    | a :: l =>
      \case
        a \as a',
        f a' \as result,
        idp : f a' = result,
        inFiltered : Index {T} x (if {Array T} result (a' :: filter {T} f l) (filter {T} f l))
      \return f x = true
      \with {
        | a', false, d, i => \let rec => filter_predicate_true l x i \in rec
        | a', true, d, i => \case i \with {
          | (0, a=x) => rewrite (inv a=x) d
          | (suc j, inJ) => \let rec => filter_predicate_true l x (j, inJ) \in rec
        }
      }

  \func filter_contains {T : \Set} {f : T -> Bool} (l : Array T) (x : T) (inFiltered : Index x (filter f l)) : Index x l \elim l
    | nil => absurd (\case inFiltered.1 \with {
    })
    | a :: l => \case f a \as result, inFiltered : Index {T} x (if {Array T} result (a :: filter {T} f l) (filter {T} f l)) \with {
      | false, inF => \let rec => filter_contains l x inF \in (suc rec.1, rec.2)
      | true, inF => \case inF \with {
        | (0, inJ) => (0, inJ)
        | (suc j, inJ) => \let rec => filter_contains l x (j, inJ) \in (suc rec.1, rec.2)
      }
    }

  \func inArray {T : \Set} {d : DecSet T} (x : T) (l : Array T) : Bool \elim l
    | nil => false
    | a :: l => if (a d.== x) true (inArray x l)

  \func inArray_index {T : \Set} {d : DecSet T} (x : T) (l : Array T) (x-in-l : inArray x l = true) : Index x l \elim l
    | nil => absurd (true/=false (inv x-in-l))
    | a :: l => \case d.decideEq a x \as dec, x-in-l : if {Bool} (decToBool dec) true (inArray {T} {d} x l) = true \with {
      | yes e, p => (0, e)
      | no n, p => \let rec => inArray_index x l p \in (suc rec.1, rec.2)
    }

  \func index_to_inArray {T : \Set} {d : DecSet T} (x : T) (l : Array T) (index : Index x l) : inArray x l = true \elim l, index
    | nil, i => absurd (\case i.1 \with {
    })
    | a :: l, (0, a=x) => \case d.decideEq a x \as dec \return if {Bool} (decToBool dec) true (inArray {T} {d} x l) = true \with {
      | yes e => idp
      | no n => absurd (n a=x)
    }
    | a :: l, (suc j, inJ) => \case d.decideEq a x \as dec \return if {Bool} (decToBool dec) true (inArray {T} {d} x l) = true \with {
      | yes e => idp
      | no n => index_to_inArray x l (j, inJ)
    }

  \func circle-shift {T : \Set} (l : Array T) : Array T \elim l
    | nil => nil
    | a :: l => l ++ (a :: nil)
    \where {
      \func contains-same-elements {T : \Set} (l : Array T) : l ~ circle-shift l \elim l
        | nil => (\lam x i => i, \lam x i => i)
        | a :: l =>
          (
            \lam x i => \case i \with {
              | (0, a=x) => index-right (0, a=x)
              | (suc f,p) => index-left (f, p)
            },
            \lam x i => \case distjoin-in l (a :: nil) x i \with {
              | inl inL => (suc inL.1, inL.2)
              | inr (0, a=x) => (0, a=x)
            }
          )

      \func same-size {T : \Set} (l : Array T) : DArray.len {l} = DArray.len {circle-shift l} \elim l
        | nil => idp
        | a :: l => rewrite (join-size l (a :: nil)) idp
    }

  \func circle-n-shift {T : \Set} (n : Nat) (l : Array T) : Array T \elim n
    | 0 => l
    | suc n => circle-shift (circle-n-shift n l)
    \where {
      \func contains-same-elements {T : \Set} {n : Nat} (l : Array T) : l ~ circle-n-shift n l \elim n
        | 0 => ~.ref
        | suc n => ~.trans (contains-same-elements {_} {n} l) (circle-shift.contains-same-elements (circle-n-shift n l))

      \func same-size {T : \Set} {n : Nat} (l : Array T) : DArray.len {l} = DArray.len {circle-n-shift n l} \elim n
        | 0 => idp
        | suc n => same-size l *> circle-shift.same-size (circle-n-shift n l)
    }

  \func unique-array {T : \Set} {d : DecSet T} (l : Array T) : Array T \elim l
    | nil => nil
    | a :: l => if (inArray a l) (unique-array l) (a :: unique-array l)
    \where {
      \func contains-same-elements {T : \Set} {d : DecSet T} (l : Array T) : l ~ unique-array l \elim l
        | nil => (\lam x i => i, \lam x i => i)
        | a :: l =>
          \case
            inArray a l \as inL,
            idp : inArray a l = inL
          \return a :: l ~ if {Array T} inL (unique-array {T} {d} l) (a :: unique-array {T} {d} l)
          \with {
            | false, p => \let rec => contains-same-elements l \in
              (
                \lam x i => \case i \with {
                  | (0, a=x) => (0, a=x)
                  | (suc f, inL) => \let recL => rec.1 x (f, inL) \in (suc recL.1, recL.2)
                },
                \lam x i => \case i \with {
                  | (0, a=x) => (0, a=x)
                  | (suc f, inL) => \let recL => rec.2 x (f, inL) \in (suc recL.1, recL.2)
                }
              )
            | true, p =>
              \let
                | a::l~l : a :: l ~ l =>
                  (
                    \lam x i => \case i \with {
                      | (0, a=x) => rewrite (inv a=x) (inArray_index a l p)
                      | (suc f, inL) => (f, inL)
                    },
                    \lam x i => (suc i.1, i.2)
                  )
                | l~uL : l ~ unique-array l => contains-same-elements l
              \in
                ~.trans a::l~l l~uL
          }

      \func Count {T : \Set} {d : DecSet T} (x : T) (l : Array T) : Nat \elim l
        | nil => 0
        | a :: l => if (a == x) (suc (Count x l)) (Count x l)
        \where {
          \func not_element_to_count {T : \Set} {d : DecSet T} (x : T) (l : Array T)
            : (Not (Index x l)) -> Count x l = 0 \elim l
            | nil => \lam n => idp
            | a :: l => \lam n => \case decideEq a x \as dec \return if {Nat} (decToBool dec) (suc (Count {T} {d} x l)) (Count {T} {d} x l) = 0 \with {
              | yes e => absurd (n (0, e))
              | no n1 => not_element_to_count x l (\lam i => n (suc i.1, i.2))
            }
        }

      \func Unique {T : \Set} (x : T) (l : Array T) => \Pi (i j : Index x l) -> i.1 = j.1
        \where {
          \func uniqueT_to_count {T : \Set} {d : DecSet T} {n : Nat} (x : T) (l : Array T n)
            : (Index x l) -> (Unique x l) -> Count x l = 1 \elim n, l
            | 0, nil => \lam i u => absurd (\case i.1)
            | suc s_n, a :: l => \lam i u => \case i \as i', idp : i.1 = i'.1 \with {
              | (0, a=x), i1= => \case decideEq a x \as dec \return if {Nat} (decToBool dec) (suc (Count {T} {d} x l)) (Count {T} {d} x l) = 1 \with {
                | yes e =>
                  \let
                    | name : Not (Index x l) =>
                      \lam j =>
                          \let j1=0 => rewrite i1= $ u i (suc j.1, j.2)
                          \in suc/=0 (inv j1=0)
                  \in
                    pmap suc (Count.not_element_to_count x l name)
                | no n => absurd (n a=x)
              }
              | (suc f, p), i1= => \case decideEq a x \as dec \return if {Nat} (decToBool dec) (suc (Count {T} {d} x l)) (Count {T} {d} x l) = 1 \with {
                | yes e => absurd (suc/=0 (inv i1= *> u i (0, e)))
                | no n => uniqueT_to_count x l (f, p)
                    (\lam i' j' =>
                        \let
                          | name => u (suc i'.1, i'.2) (suc j'.1, j'.2)
                        \in
                          \case
                            s_n \as n',
                            l \as l' : Array T n',
                            i'.1 \as i : Fin (DArray.len {l'}),
                            j'.1 \as j : Fin (DArray.len {l'}),
                            name : suc i = suc j
                          \return i = j
                          \with {
                            | 0, nil, i, _, _ => absurd (\case i)
                            | suc s_n, b :: l', i, j, i=j => pmap (\lam x => \case x \with {
                              | suc x => x
                              | 0 => 0
                            }) i=j
                          }
                    )
              }
            }
        }

      \func size {T : \Set} (l : Array T) : Nat \elim l
        | nil => 0
        | a :: l1 => suc (size l1)

      \func size=len {T : \Set} (l : Array T) : l.len = size l \elim l
        | nil => idp
        | a :: l1 => pmap suc (size=len l1)

      \func without-x {T : \Set} {d : DecSet T} (l : Array T) (x : T) : Array T => filter (\lam y => not (y == x)) l

      \func without-x-size {T : \Set} {d : DecSet T} (l : Array T) (x : T)
        : size l = Count x l Nat.+ size (without-x l x) \elim l
        | nil => idp
        | a :: l =>
          \case
            decideEq a x \as dec
          \return suc (size {T} l) = if {Nat} (decToBool dec) (suc (Count {T} {d} x l)) (Count {T} {d} x l)
                                       Nat.+ size {T} (if (not (decToBool dec)) (a :: without-x {T} {d} l x) (without-x {T} {d} l x))
          \with {
            | yes e => pmap suc (without-x-size l x)
            | no n => pmap suc (without-x-size l x)
          }

      \func each-element-unique {T : \Set} {d : DecSet T} (x : T) (l : Array T) : Unique x (unique-array l) \elim l
        | nil => \lam xInA1 _  => absurd (\case xInA1.1 \with {
        })
        | a :: l => \lam xInA1 xInA2 =>
            \case
              inArray a l \as dec,
              idp : inArray a l = dec,
              xInA1 \as inA1 : Index {T} x (if {Array T} dec (unique-array {T} {d} l) (a :: unique-array {T} {d} l)),
              xInA2 \as inA2 : Index {T} x (if {Array T} dec (unique-array {T} {d} l) (a :: unique-array {T} {d} l))
            \return inA1.1 = inA2.1
            \with {
              | false, p, inA1, inA2 => \case inA1 \as inA1', inA2 \as inA2' \return inA1'.1 = inA2'.1 \with {
                | (0, _), (0, _) => idp
                | (suc f, p1), (0, a=x) =>
                  \let
                    | tmp : Index x l => (contains-same-elements l).2 x (f, p1)
                    | inL : inArray a l = true => rewrite a=x $ index_to_inArray x l tmp
                  \in
                    absurd (true/=false (inv inL *> p))
                | (0, a=x), (suc f, p1) =>
                  \let
                    | tmp : Index x l => (contains-same-elements l).2 x (f, p1)
                    | inL : inArray a l = true => rewrite a=x $ index_to_inArray x l tmp
                  \in
                    absurd (true/=false (inv inL *> p))
                | (suc f1, p1), (suc f2, p2) => pmap fsuc $ each-element-unique x l (f1, p1) (f2, p2)
              }
              | true, p, inA1, inA2 => each-element-unique x l inA1 inA2
            }

      \func same-size {T : \Set} {d : DecSet T} (a b : Array T) (a~b : a ~ b)
        : DArray.len {unique-array a} = DArray.len {unique-array b} =>
        \let
          | a~uA : a ~ unique-array a => contains-same-elements a
          | b~uB : b ~ unique-array b => contains-same-elements b
          | uA~uB : unique-array a ~ unique-array b => ~.trans (~.trans (~.sym a~uA) a~b) b~uB
          | all-unique-a : \Pi (x : T) -> Unique x (unique-array a) =>
            \lam x => each-element-unique x a
          | all-unique-b : \Pi (x : T) -> Unique x (unique-array b) =>
            \lam x => each-element-unique x b
        \in
          lemma
              (unique-array a)
              (unique-array b)
              uA~uB
              all-unique-a
              all-unique-b
        \where {
          \func lemma {T : \Set} {d : DecSet T} (a b : Array T) :
            a ~ b ->
            (\Pi (x : T) -> Unique x a) ->
            (\Pi (x : T) -> Unique x b) ->
            DArray.len {a} = DArray.len {b} \elim a
            | nil => \case b \as c \return \Pi (nil ~ c) (\Pi (x : T) -> Unique {T} x nil) (\Pi (x : T) -> Unique {T} x c) -> 0 = DArray.len{c} \with {
              | nil => \lam _ _ _ => idp
              | y :: l => \lam a~b _ _ => absurd (\case (a~b.2 y (0, idp)).1)
            }
            | :: {n} e a => \lam a~b u-a u-b =>
                \let
                  | a~without-e-b : a ~ without-x b e =>
                    (
                      \lam x i =>
                          \let
                            | index-b => a~b.1 x (suc i.1, i.2)
                            | x/=e : Not (x = e) => \lam p => suc/=0 (inv (u-a x (0, inv p) (suc i.1, i.2)))
                            | x/==e=true : not (x == e) = true => \case decideEq x e \as d \return not(decToBool d) = true \with {
                              | yes e1 => absurd (x/=e e1)
                              | no n1 => idp
                            }
                            | index-b/e  => rewrite index-b.2 $
                            filter-index (\lam y => not (y == e)) b index-b.1 (rewrite index-b.2 x/==e=true)
                          \in
                            index-b/e,
                      \lam x i =>
                          \let
                            | index-b => filter_contains b x i
                            | index-ea => a~b.2 x index-b
                            | index-a : Index x a => \case index-ea \with {
                              | (0, e=x) =>
                                \let
                                  | name => rewrite e=x $ rewrite i.2 $ filter-sat (\lam y => not (y == e)) b i.1
                                \in \case decideEq x x \as dec, name : not (decToBool dec) = true \with {
                                  | yes e1, p => absurd (true/=false (inv p))
                                  | no n1, p => absurd (n1 idp)
                                }
                              | (suc f,p) => (f, p)
                            }
                          \in index-a
                    )
                  | u-a' : \Pi (x : T) -> Unique x a => \lam x i j =>
                      \case decideEq x e \with {
                        | yes e1 => absurd (suc/=0 $ u-a x (suc i.1, i.2) (0, inv e1))
                        | no n1 =>
                          \let
                            | name => u-a x (suc i.1, i.2) (suc j.1, j.2)
                          \in
                            \case
                              n \as n',
                              a \as l' : Array T n',
                              i.1 \as i : Fin (DArray.len {l'}),
                              j.1 \as j : Fin (DArray.len {l'}),
                              name : suc i = suc j
                            \return i = j
                            \with {
                              | 0, nil, i, _, _ => absurd (\case i)
                              | suc s_n, b :: l', i, j, i=j => pmap (\lam x => \case x \with {
                                | suc x => x
                                | 0 => 0
                              }) i=j
                            }
                      }
                  | u-b/e : \Pi (x : T) -> Unique x (without-x b e) =>
                    \let name => lemma-lemma b e u-b \in \lam x  =>
                        \case decideEq x e \with {
                          | yes e1 => \lam i j =>
                              \let
                                | inA => a~without-e-b.2 x i
                                | un-a => suc/=0 {inA.1} $ inv $ u-a x (0, inv e1) (suc inA.1, inA.2)
                              \in
                                absurd un-a
                          | no n1 => name x n1
                        }
                  | name => lemma a (without-x b e) a~without-e-b u-a' u-b/e
                  | name1 : Count e b = 1 => \case b \as b', a~b.1 e (0, idp) : Index e b', u-b e : Unique e b' \return Count e b' = 1 \with {
                    | nil, i, u => Unique.uniqueT_to_count e nil i u
                    | :: {n} xb b, i, u => Unique.uniqueT_to_count e (xb :: b) i u
                  }
                  | dec-size-b =>
                    rewrite
                        (
                          name1,
                          inv $ size=len b,
                          inv $ size=len (without-x b e)
                        )
                      $ without-x-size b e
                \in
                  inv (dec-size-b *> pmap suc (inv name))
            \where {
              \func lemma-lemma {T : \Set} {d : DecSet T} (b : Array T) (e : T) :
                (\Pi (x : T) -> Unique x b) ->
                \Pi (x : T) (x /= e) -> Unique x (without-x b e) \elim b
                | nil => rewrite (idp : without-x nil e = nil) (\lam un x x/=e => un x)
                | xb :: b => \lam un x x/=e => \case decideEq xb e \as dec \return Unique x (if (not (decToBool dec)) (xb :: without-x b e) (without-x b e)) \with {
                  | yes xb=e => {?} -- lemma-lemma b e {?} x x/=e
                  | no n => {?}
                }
            }
        }
    }
}
