\import Arith.Nat
\import calculus.Base
\import calculus.Beta

\type Repr (T : \Type) => \Pi (e : T) -> Expr_

\func K-Args-Fun (A : \Type) (k : Nat) : \Type \elim k
  | 0 => A
  | suc k => A -> (K-Args-Fun A k)

\data K-Args (A : \Type) (k : Nat) \elim k
  | 0 => arg-empty
  | suc k => arg-con (a : A) (K-Args A k)

\func map {A B : \Type} {k : Nat} (f : A -> B) (as : K-Args A k) : K-Args B k \elim k, as
  | 0, arg-empty => arg-empty
  | suc k, arg-con a as => arg-con (f a) (map f as)

\func \infix 6 <- {A : \Type} {k : Nat} (f : K-Args-Fun A k) (args : K-Args A k) : A \elim k, f, args
  | 0, f, arg-empty => f
  | suc k, f, arg-con a args => f a <- args


\func K-App {k : Nat} (E : Expr_) : K-Args-Fun Expr_ k \elim k
  | 0 => E
  | suc k => \lam (a : Expr_) => K-App (E @ a)

\data Definable {T : \Type} {r : Repr T} {k : Nat} (f : K-Args-Fun T k) : \Set
  | def-exists (E : Expr_) (\Pi (a : K-Args T k) -> BetaEq (K-App E <- map r a) (r (f <- a)))

-- intersection - definable

\func insertion-def {T : \Type} {r : Repr T} {k : Nat}
                    (f : K-Args-Fun T (suc k)) (f-def : Definable {T} {r} {suc k} f)
                    (a : T)                    (a-def : Definable {T} {r} {0} a)
  : Definable {T} {r} {k} (f a) \elim f-def, a-def
  | def-exists Ef _x, def-exists Ea _x1 =>
    \let
      | a-b-eq => _x1 arg-empty
    \in def-exists (Ef @ Ea) (\lam as =>
        \let
          | appl_ => _x (arg-con a as)
        \in
          b-eq-chain (K-App {k} (Ef @ r a) <- map {T} {Expr_} {k} r as)
              (k-app-b-eq (BetaEq.app-save-eq-right a-b-eq))
              appl_
                             )
  \where {
    \func k-app-b-eq {T : \Type} {r : Repr T} {k : Nat} {as : K-Args T k} {e1 e2 : Expr_}
                     (b-eq : BetaEq e1 e2) : BetaEq (K-App e1 <- map r as) (K-App e2 <- map r as) \elim k, as
      | 0, arg-empty => b-eq
      | suc k, arg-con a as => k-app-b-eq (BetaEq.app-save-eq-left b-eq)
  }
