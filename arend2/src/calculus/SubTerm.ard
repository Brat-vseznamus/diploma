\import Arith.Nat
\import Data.Or
\import Function.Meta
\import Logic
\import Paths
\import Paths.Meta
\import calculus.AlphaEq
\import calculus.AlphaEq2
\import calculus.Base
\import calculus.Beta
\import calculus.Context
\import calculus.Types

\data SubTerm (e se : Expr) \elim e
  | Lam i B => sub-lam  (SubTerm B se)
  | App P Q => sub-app  (Or (SubTerm P se) (SubTerm Q se))
  | e       => sub-same (e = se)
  \where {
    \func type-subterm
      {e se : Expr}
      {sub : SubTerm e se}
      (t : SimpleType) (c : Context) (typed : TypedExpr e t c) :
    \Sigma (t' : SimpleType) (c' : Context) (TypedExpr se t' c') \elim e, se, sub
      | Lam i e1, se1, sub-lam sub =>
        \let
          | (a, b, t=a->b) => TypedExpr.lam-has-func-type typed
        \in \case (rewriteF t=a->b typed) \with {
          | typed-lam b-exists i-is-not-free => type-subterm {e1} {se1} {sub} b (Context.add-assump (i, a) c) b-exists
        }
      | App e1 e2, se1, sub-app o =>
        \let
          | (Qt, Rt, t1, t2) => TypedExpr.app-parts-types typed
        \in \case o \with {
        | inl a => type-subterm {e1} {se1} {a} (Func Qt Rt) c t1
        | inr b => type-subterm {e2} {se1} {b} Qt c t2
      }
      | e1, se1, sub-same p => (t, c, rewriteF p typed)
  }


\data NormalForm (e e' : Expr)
  | nf (Beta-Chain e e') (Not (\Sigma (e'' : Expr) (Beta-Red e' e'')))

-- TODO
\func unwrap-not-NF (e : Expr) (nf : Not (NormalForm e e)) : \Sigma (e' : Expr) (Beta-Red e e') \elim e
  | Con n => absurd (nf $ con-is-nf n)
  | Var n => absurd (nf $ var-is-nf n)
  | Lam n e => \let (B', red-B') => unwrap-not-NF e (body-not-nf-if-not-lam-nf n e nf) \in (Lam n B', beta-lam idp red-B')
  | App e1 e2 => {?}

\func var-is-nf (i : Nat) : NormalForm (Var i) (Var i) =>
  nf (Beta-Chain.end (a2var-eq idp)) (\lam _x => \case _x \with {| (e'',b) => lemma1 i e'' b })
  \where {
    \func lemma1 (i : Nat) (e : Expr) (red : Beta-Red (Var i) e) : Empty
  }

\func con-is-nf (i : Nat) : NormalForm (Con i) (Con i) =>
  nf (Beta-Chain.end (a2con-eq idp)) (\lam _x => \case _x \with {| (e'',b) => lemma1 i e'' b })
  \where {
    \func lemma1 (i : Nat) (e : Expr) (red : Beta-Red (Con i) e) : Empty
  }

\func decideNF (e : Expr) : Or (NormalForm e e) (Not (NormalForm e e)) \elim e
  | Con n => inl (con-is-nf n)
  | Var n => inl (var-is-nf n)
  | Lam n e => \let dec => decideNF e \in
    \case dec \with {
      | inl a => inl $ lam-nf-if-body-nf n e a
      | inr b => inr $ lam-not-nf-if-not-body-nf n e b
    }
  | App e1 e2 => \case e1 \as P, decideNF P \as dec \return Or (NormalForm (App P e2) (App P e2)) (Not (NormalForm (App P e2) (App P e2))) \with {
    | Con n, dec => \case decideNF e2 \with {
      | inl a1 => \case con-is-nf n, a1 \return Or (NormalForm (App (Con n) e2) (App (Con n) e2)) (Not (NormalForm (App (Con n) e2) (App (Con n) e2))) \with {
        | nf _ n, nf _ n1 => inl (nf (end A-Eq2.ref) (\lam (x, red-x) => lemma1 red-x n n1 (lemma2-2 idp)))
      }
      | inr b => inr (\lam n1 => \case n1 \with {
        | nf _ n2 => b (nf (end A-Eq2.ref) (\lam (e2', red-e2') => n2 (App (Con n) e2', beta-app-left A-Eq2.ref red-e2')))
      })
    }
    | Var n, dec => \case decideNF e2 \with {
      | inl a1 => \case var-is-nf n, a1 \return Or (NormalForm (App (Var n) e2) (App (Var n) e2)) (Not (NormalForm (App (Var n) e2) (App (Var n) e2))) \with {
        | nf _ n, nf _ n1 => inl (nf (end A-Eq2.ref) (\lam (x, red-x) => lemma1 red-x n n1 (lemma2-1 idp)))
      }
      | inr b => inr (\lam n1 => \case n1 \with {
        | nf _ n2 => b (nf (end A-Eq2.ref) (\lam (e2', red-e2') => n2 (App (Var n) e2', beta-app-left A-Eq2.ref red-e2')))
      })
    }
    | Lam n P, dec => inr (\lam n1 => \case n1 \with {
      | nf b n2 => n2 (replace P n e2, beta-repl-right idp)
    })
    | App P1 P2, inl a =>
      \case decideNF e2 \with {
      | inl a1 => \case a, a1 \return Or (NormalForm (App (App P1 P2) e2) (App (App P1 P2) e2)) (Not (NormalForm (App (App P1 P2) e2) (App (App P1 P2) e2))) \with {
        | nf _ n, nf _ n1 => inl (nf (end A-Eq2.ref) (\lam (x, red-x) => lemma1 red-x n n1 (lemma2-3 idp)))
      }
      | inr b => inr (\lam n1 => \case n1 \with {
        | nf _ n2 => b (nf (end A-Eq2.ref) (\lam (e2', red-e2') => n2 (App (App P1 P2) e2', beta-app-left A-Eq2.ref red-e2')))
      })
    }
    | App P P1, inr b => inr (\lam n1 => \case n1 \with {
      | nf _ n2 => b (nf (end A-Eq2.ref) (\lam (e1', red-e1') => n2 (App e1' e2, beta-app-right red-e1' A-Eq2.ref)))
    })
  }
  \where {
    -- Or (\Sigma (e1' e2' : Expr) (x = App e1' e2')) (\Sigma (P : Expr) (i : Nat) (e1 = Lam i P))
    \func lemma1 {x e1 e2 : Expr} (b-red : Beta-Red (App e1 e2) x)
                 (n : Not (\Sigma (e'' : Expr) (Beta-Red e1 e'')))
                 (n1 : Not (\Sigma (e'' : Expr) (Beta-Red e2 e'')))
                 (e1/=Lam : Not (\Sigma (B : Expr) (i : Nat) (e1 = Lam i B))) : Empty
    \elim x, e1, e2, b-red
      | App x x1, e1, e2, beta-app-left a b-red => n1 (x1, b-red)
      | App x x1, e1, e2, beta-app-right b-red a => n (x, b-red)
      | x, Lam i e1, e2, beta-repl-right p => e1/=Lam (e1, i, idp)

    \func lemma2-1 {e : Expr} {i : Nat} (p : e = Var i) : Not (\Sigma (B : Expr) (j : Nat) (e = Lam j B)) =>
      \lam _x => suc/=0
          (pmap
              (\lam (smth : Expr) => \case smth \with {
                | Con n => 4
                | Var n => 0
                | Lam n e1 => 1
                | App e1 e2 => 2
              })
            (inv _x.3 *> p)
          )

    \func lemma2-2 {e : Expr} {i : Nat} (p : e = Con i) : Not (\Sigma (B : Expr) (j : Nat) (e = Lam j B)) =>
      \lam _x => suc/=0
          (pmap
              (\lam (smth : Expr) => \case smth \with {
                | Con n => 0
                | Var n => 4
                | Lam n e1 => 1
                | App e1 e2 => 2
              })
              (inv _x.3 *> p)
          )

    \func lemma2-3 {e P Q : Expr}  (p : e = App P Q) : Not (\Sigma (B : Expr) (j : Nat) (e = Lam j B)) =>
      \lam _x => suc/=0
          (pmap
              (\lam (smth : Expr) => \case smth \with {
                | Con n => 2
                | Var n => 4
                | Lam n e1 => 1
                | App e1 e2 => 0
              })
              (inv _x.3 *> p)
          )
  }

-- TODO
\func not-app-conclusion {e P Q : Expr} (is-app : e = App P Q) (notNF : Not (NormalForm e e)) :
  Or
      (Or
          (Not (NormalForm P P))
          (Not (NormalForm Q Q))
      )
      (\Sigma (B : Expr) (i : Nat) (P = Lam i B)) =>
  \case
    P \as P', decideNF P', decideNF Q
  \return Or
      (Or
          (Not (NormalForm P' P'))
          (Not (NormalForm Q Q))
      )
      (\Sigma (B : Expr) (i : Nat) (P' = Lam i B))
  \with {
    | _, inl a, inr b => inl (inr b)
    | _, inr b, inl a => inl (inl b)
    | _, inr b, inr b1 => inl (inl b)
    | Con n, inl a, inl a1 => {?}
    | Var n, inl a, inl a1 => {?}
    | Lam n P', inl a, inl a1 => inr (P', n, idp)
    | App P'1 P'2, inl a, inl a1 => {?}
  }


\func and-to-or {A B : \Type} (p : Not (\Sigma A B)) (p1 : Or A (Not A)) (p2 : Or B (Not B)) : Or (Not A) (Not B) \elim p1, p2
  | inl a, inl b => absurd (p (a, b))
  | inl a, inr nb => inr nb
  | inr na, inl b => inl na
  | inr na, inr nb => inl na

\func lam-not-nf-if-not-body-nf (i : Nat) (B : Expr) (b-nf : Not(NormalForm B B)) : Not(NormalForm (Lam i B) (Lam i B)) =>
  \lam n => b-nf (body-nf-if-lam-nf i B n)

\func lam-nf-if-body-nf (i : Nat) (B : Expr) (b-nf : NormalForm B B) : NormalForm (Lam i B) (Lam i B) \elim b-nf
  | nf b n => nf
      (end A-Eq2.ref)
      (\lam _x =>
          \let (se, beta) => _x \in lam-nf-if-body-nf-lemma se beta n
      )
  \where {
    \func lam-nf-if-body-nf-lemma
        {i : Nat}
        {B : Expr}
        (se : Expr)
        (beta : Beta-Red (Lam i B) se)
        (n : Not (\Sigma (e'' : Expr) (Beta-Red B e''))) : Empty \elim se, beta
      | Lam j se, beta-lam p beta => n (se, beta)
  }

\func body-not-nf-if-not-lam-nf (i : Nat) (B : Expr) (lam-nf : Not(NormalForm (Lam i B) (Lam i B))) : Not(NormalForm B B) =>
  \lam p => lam-nf (lam-nf-if-body-nf i B p)

\func body-nf-if-lam-nf (i : Nat) (B : Expr) (lam-nf : NormalForm (Lam i B) (Lam i B)) : NormalForm B B \elim lam-nf
  | nf _ n => nf (end A-Eq2.ref) $ \lam (x, red-x) => n (Lam i x, beta-lam idp red-x)

\func app-with-lam-reducable {e B Q : Expr} {i : Nat} (p : e = App (Lam i B) Q) : Beta-Red e (replace B i Q) =>
  rewriteF (inv p) (beta-repl-right (idp {Expr} {replace B i Q}))

\func no-nf-if-lam-app (e P Q : Expr) (i : Nat) (has-lam : SubTerm e (App (Lam i P) Q)) : Not (NormalForm e e) \elim e, has-lam
  | Lam i1 e, sub-lam has-lam => \lam n => (no-nf-if-lam-app e P Q i has-lam) (body-nf-if-lam-nf i1 e n)
  | App P' Q', sub-app o => \case o  \with {
    | inl a => \lam n => \let
        | notNF-P => no-nf-if-lam-app P' P Q i a
        | (P'', red-P'') => unwrap-not-NF P' notNF-P
                            \in \case n \with {
      | nf _ n1 => n1 (App P'' Q', beta-app-right red-P'' A-Eq2.ref)
    }
    | inr b =>  \lam n => \let
      | notNF-Q => no-nf-if-lam-app Q' P Q i b
      | (Q'', red-Q'') => unwrap-not-NF Q' notNF-Q
                          \in \case n \with {
        | nf _ n1 => n1 (App P' Q'', beta-app-left A-Eq2.ref red-Q'')
      }
  }
  | e, sub-same a => \lam n => \case n \with {
    | nf _ n1 => n1 (replace P i Q, app-with-lam-reducable a)
  }

\func no-lam-app-in-nf (e : Expr) (nf : NormalForm e e) :
  Not(\Sigma (P Q : Expr) (i : Nat) (has-lam : SubTerm e (App (Lam i P) Q))) =>
  \lam p => (no-nf-if-lam-app e p.1 p.2 p.3 p.4) nf