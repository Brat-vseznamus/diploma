\import Arith.Int
\import Arith.Nat
\import Data.Bool
\import Data.Or
\import Logic
\import Paths
\import Paths.Meta
\import calculus.Base
\import calculus.Beta
\import calculus.Context
\import calculus.SubTerm
\import calculus.Types
\import calculus.theorems.common
\import math.sets
\import math.utils

\func Theorema1
  (e : Expr_)
  (t : Type_)
  (h : Nat)
  (con : Context_)
  (nf : NormalForm e e)
  (typed : TypedExpr_ e t h con)
  (t-inS : inS t)
  (no-con : \Pi (i : Nat) -> Not (SubTerm e (c i)))
  (closed : ClosedForm e h con)
  (each-var-typed : VarsTypedCorrectly con) :
  \Pi (se : Expr_) (sub : SubTerm e se) -> inS (SubTerm.type-subterm e se sub t h con typed).1 \elim e
  | c n => \lam se sub => \case sub \with {
    | sub-same p => absurd (no-con n (sub-same idp))
  }
  | v n => \lam se sub => \case sub \as s \return inS (SubTerm.type-subterm (v n) se s t h con typed).1 \with {
    | sub-same p => t-inS
  }
  | l e => \lam se sub => \case sub \as s, t \as t', typed \as typed' : TypedExpr_ (l e) t' h con, t-inS : inS t' \return inS (SubTerm.type-subterm (l e) se s t' h con typed').1 \with {
    | sub-lam s, a ~> b, t-lam typedl, t-inS' => \let
      | nfl : NormalForm e e => \case nf \with {
        | NormalForm.nf b1 n1 => NormalForm.nf (b-chain-end idp) (\lam (e', b-e') => n1 (l e', bred-lam b-e'))
      }
      | no-conl : \Pi (i : Nat) -> Not (SubTerm e (c i)) => \lam i s => (no-con i) (sub-lam s)
      | a-inSl : inS a => \case t-inS' \with {
        | is1 p => absurd (suc/=0 (pmap TDecSet.conNo p))
        | is2 p => \let (lft, rght) =>  TDecSet.rmFunc p \in is1 lft
        | is3 p => \let (lft, rght) =>  TDecSet.rmFunc p \in is2 lft
      }
      | b-inSl : inS b => \case t-inS' \with {
        | is1 p => absurd (suc/=0 (pmap TDecSet.conNo p))
        | is2 p => \let (lft, rght) => TDecSet.rmFunc p \in is1 rght
        | is3 p => \let (lft, rght) => TDecSet.rmFunc p \in is2 rght
      }
      | closedL : FV e (suc h) leq CV (Context_.update-assump (h, a) con) (suc h) => theorema1-lemma e h a con -- ext-closed e n a c closed
      | var-ext : VarsTypedCorrectly (Context_.update-assump (h, a) con) => var-ext-impl h a b a-inSl b-inSl con each-var-typed
      | rec => Theorema1 e b (suc h) (Context_.update-assump (h, a) con) nfl typedl b-inSl no-conl closedL var-ext se s
                    \in rec
    | sub-same p, t' ~> t'1, t-lam typed', t-inS' => t-inS'
  }

  | e1 @ e2 => \lam se sub => \case sub \as s, t \as t', typed \as typed' : TypedExpr_ (e1 @ e2) t' h con, t-inS : inS t' \return inS (SubTerm.type-subterm (e1 @ e2) se s t' h con typed').1 \with {
    | sub-app-left a, t', t-app Qt typed' typed'1, t-inS' =>
      \let
        | pt-inS => leftInS3 e1 e2 t' Qt h con typed' typed'1 no-con nf each-var-typed
      \in Theorema1
          e1
          (Qt ~> t')
          h
          con
          (NormalForm.nf (b-chain-end idp) (\lam (e, b-e) => \case nf \with {
            | NormalForm.nf b1 n => n (e @ e2, bred-app-left b-e idp)
          }))
          typed'
          pt-inS
          (\lam i s => no-con i (sub-app-left s))
          (decon-closed {e1 @ e2} {e1} {e2} {h} {con} {idp} closed).1
          each-var-typed
          se
          a
    | sub-app-right b, t', t-app Qt typed' typed'1, t-inS' =>
      \let
        | pt-inS => leftInS3 e1 e2 t' Qt h con typed' typed'1 no-con nf each-var-typed
        | q-inS : inS Qt => \case pt-inS, t-inS' \with {
          | is1 p, _ => absurd (suc/=0 (pmap TDecSet.conNo p))
          | is2 p, is1 p1 => \let (eq1, eq2) => TDecSet.rmFunc p \in is1 eq1
          | is2 p, is2 p1 => \let (eq1, eq2) => TDecSet.rmFunc p \in absurd (suc/=0 (pmap TDecSet.conNo (inv p1 *> eq2)))
          | is2 p, is3 p1 => \let (eq1, eq2) => TDecSet.rmFunc p \in absurd (suc/=0 (pmap TDecSet.conNo (inv p1 *> eq2)))
          | is3 p, is1 p1 => \let (eq1, eq2) => TDecSet.rmFunc p \in absurd (suc/=0 (pmap TDecSet.conNo (inv eq2 *> p1)))
          | is3 p, is2 p1 => \let (eq1, eq2) => TDecSet.rmFunc p \in is2 eq1
          | is3 p, is3 p1 => \let (eq1, eq2) => TDecSet.rmFunc p \in absurd (suc/=0 (pmap TDecSet.conNo (TDecSet.rmFunc (inv p1 *> eq2)).1))
        }
      \in Theorema1
          e2
          Qt
          h
          con
          (NormalForm.nf (b-chain-end idp) (\lam (e, b-e) => \case nf \with {
            | NormalForm.nf b1 n => n (e1 @ e, bred-app-right idp b-e)
          }))
          typed'1
          q-inS
          (\lam i s => no-con i (sub-app-right s))
          (decon-closed {e1 @ e2} {e1} {e2} {h} {con} {idp} closed).2
          each-var-typed
          se
          b
    | sub-same p, t', t-app Qt typed' typed'1, t-inS' => t-inS'
  }

  \where {
    \func lam-decon {t a b c d : Type_} (p1 : t = a ~> b) (p2 : t = c ~> d) : \Sigma (a = c) (b = d) =>
      TDecSet.rmFunc (inv p1 *> p2)

    \func decon-closed {e e1 e2 : Expr_} {h : Nat} {c : Context_} {p : e = e1 @ e2}
                       (closed : FV e h leq CV c h) :
      \Sigma (FV e1 h leq CV c h) (FV e2 h leq CV c h) \elim e, e1, e2, p, closed
      | e1 @ e2, e3, e4, p, closed1 =>
        \let
          | name => Expr_.app-decon p
          | mInC => leq.fromSet closed1
          | mW => in.merge-works {Int} {IntRing} {FV e1 h} {FV e2 h}
        \in
          (
            leq.inSet (\lam x i => mInC x (mW x (byLeft (rewrite name.1 i)))),
            leq.inSet (\lam x i => mInC x (mW x (byRight (rewrite name.2 i))))
          )
      | c n, c n1, c n2, (), closed1
      | c n, v n1, c n2, (), closed1
      | c n, l e1, c n2, (), closed1
      | c n, e1 @ e2, c n1, (), closed1
      | v n, c n1, c n2, (), closed1
      | v n, v n1, c n2, (), closed1
      | v n, l e1, c n2, (), closed1
      | v n, e1 @ e2, c n1, (), closed1
      | l e, c n1, c n2, (), closed1
      | l e, v n1, c n2, (), closed1


    -- TODO Return
    --    \func ext-closed
    --      (e : Expr)
    --      (n : Nat)
    --      (a : Type_)
    --      (c : Context)
    --      (l : removeAll (FV e) n leq CV c)
    --      : FV e leq CV (Context_.update-assump (n, a) c) =>
    --      \let
    --        | decL => leq.fromSet l
    --        | cvU : CV (Context_.update-assump (n, a) c) seq (n :: CV c) => {?} -- TODO
    --        | inC1->C2 : \Pi (x : Nat) (x in (n :: CV c)) -> x in CV (Context_.update-assump (n, a) c) => \case cvU \with {
    --          | seq-con l1 l2 => leq.fromSet l2
    --        }
    --      \in
    --        leq.inSet (\lam x i => \case decideEq n x \with {
    --          | yes e1 => inC1->C2 x (isHead e1)
    --          | no n1 => inC1->C2 x (inTail n1 (decL x (removeAll.rmv-works2 x i n1)))
    --        })

    \func var-ext-impl (h : Nat) (a b : Type_) (a-inS : inS a) (b-inS : inS b) (con : Context_)
                       (each-var-typed : VarsTypedCorrectly con) : VarsTypedCorrectly (Context_.update-assump (h, a) con) =>
      {?}
    --    \elim con
    --      | empty => \lam i ti p => \case decideEq n i \as d1, decideEq a ti \as d2, p : if {Bool} (decToBool d1) (decToBool d2) false = true \with {
    --        | yes e, yes e1, p1 => rewriteF e1 a-inS
    --        | no n1, yes e, ()
    --      }
    --      | with (m, tm) c1 => \lam i ti p => \case
    --        decideEq m i \as d1,
    --        decideEq m n \as d2,
    --        decideEq tm ti \as d3,
    --        p : if {Bool} (decToBool d1) (if {Type_} (decToBool d2) a tm == ti) (Context_.typed-var-in-context (i, ti) (if {Context} (decToBool d2) c1 (Context_.update-assump (n, a) c1))) = true,
    --        (each-var-typed i ti) : \Pi (if {Bool} (decToBool d1) (decToBool d3) (Context_.typed-var-in-context (i, ti) c1) = true) -> inS ti \with {
    --        | yes e, yes e1, yes e2, p1, _x => _x idp
    --        | yes e, yes e1, no n1, p1, _x => \let a=ti => ==->= {Type_} {TDecSet} p1 \in rewriteF a=ti a-inS
    --        | yes e, no n1, yes e1, p1, _x => _x idp
    --        | yes e, no n1, no n2, p1, _x => \let ti=tm => ==->= {Type_} {TDecSet} p1 \in absurd (n2 ti=tm)
    --        | no n1, yes e, yes e1, p1, _x => _x p1
    --        | no n1, yes e, no n2, p1, _x => _x p1
    --        | no n1, no n2, yes e, p1, _x => \case decideEq n i \with {
    --          | yes e1 => \case decideEq m m \as dm, decideEq tm tm \as dtm, (each-var-typed m tm) : (if {Bool} (decToBool dm) (decToBool dtm) (Context_.typed-var-in-context (m, tm) c1) = true -> inS tm) \with {
    --            | yes e2, yes e3, _x1 => rewriteF e (_x1 idp)
    --            | yes e2, no n3, _x1 => absurd (n3 idp)
    --            | no n3, yes e2, _x1 => absurd (n3 idp)
    --            | no n3, no n4, _x1 => absurd (n3 idp)
    --          }
    --          | no n3 =>
    --            \let
    --              | n-check => neutral-check {n} {i} {c1} {a} {ti} n3
    --              | p2 => rewriteF n-check p1
    --            \in _x p2
    --        }
    --        | no n1, no n2, no n3, p1, _x => \case decideEq n i \with {
    --          | yes e1 => \let exact => get-after-update (rewriteF (inv e1) p1) \in rewriteF (inv exact) a-inS
    --
--          | no n3 =>
    --            \let
    --              | n-check => neutral-check {n} {i} {c1} {a} {ti} n3
    --              | p2 => rewriteF n-check p1
    --            \in _x p2
    --        }
    --      }

    \func neutral-check {n i : Nat} {c1 : Context_} {tn ti : Type_}
                        (neq : Not (n = i)) :
      Context_.typed-var-in-context (i, ti) (Context_.update-assump (n, tn) c1) = Context_.typed-var-in-context (i, ti) c1 =>
      {?}

    \func get-after-update {n : Nat} {ti b : Type_} {c1 : Context_}
                           (p : Context_.typed-var-in-context (n, ti) (Context_.update-assump (n, b) c1) = true) :
      ti = b => {?}

    \func leftInS3
      (e1 e2 : Expr_)
      (t Qt : Type_)
      (h : Nat)
      (con : Context_)
      (typedP : TypedExpr_ e1 (Qt ~> t) h con)
      (typedQ : TypedExpr_ e2 Qt h con)
      (no-con : \Pi (i : Nat) -> Not (SubTerm (e1 @ e2) (c i)))
      (nf : NormalForm (e1 @ e2) (e1 @ e2))
      (each-var-typed : VarsTypedCorrectly con) : inS (Qt ~> t) \elim e1
      | c n => absurd (no-con n (sub-app-left (sub-same idp)))
      | v n => \case typedP \with {
        | t-var i-exists => \let f-inS => each-var-typed n h (Qt ~> t) i-exists \in f-inS
      }
      | l e1 => \case nf \with {
        | NormalForm.nf b n1 => absurd (n1 (apply_ e1 e2, bred-repl idp))
      }
      | P @ Q =>
        \let
          | rec => leftInS
              P Q
              (Qt ~> t)
              h
              con
              typedP
              (\lam i s => no-con i (sub-app-left s))
              (NormalForm.nf (b-chain-end idp) (\lam (app-red, app-red-b) => \case nf \with {
                | NormalForm.nf b n => n (app-red @ e2, bred-app-left app-red-b idp)
              }))
              each-var-typed
        \in \case rec \with {
          | (t',i,t1) => \case i, typedP \with {
            | is1 p, (t-app Qt2 tP tQ) => absurd (suc/=0 (pmap TDecSet.conNo p))
            | is2 p, (t-app Qt2 tP tQ) => absurd (suc/=0 (pmap TDecSet.conNo (TDecSet.rmFunc p).2))
            | is3 p, (t-app Qt2 tP tQ) =>
              \let
                | (lft, rght-tmp) => TDecSet.rmFunc p
              \in is2 rght-tmp
          }
        }

    \func leftInS
      (e1 e2 : Expr_)
      (t : Type_)
      (h : Nat)
      (con : Context_)
      (typed : TypedExpr_ (e1 @ e2) t h con)
      (no-con : \Pi (i : Nat) -> Not (SubTerm (e1 @ e2) (c i)))
      (nf : NormalForm (e1 @ e2) (e1 @ e2))
      (each-var-typed : VarsTypedCorrectly con) :
      \Sigma (t' : Type_) (inS (t' ~> t)) (TypedExpr_ e1 (t' ~> t) h con) \elim e1, typed
      | c n, t-app Qt typed1 typed2 => absurd (no-con n (sub-app-left (sub-same idp)))
      | v n, t-app Qt typed1 typed2 => \case typed1 \with {
        | t-var i-exists => \let f-inS => each-var-typed n h (Qt ~> t) i-exists \in (Qt, f-inS, typed1)
      }
      | l e1, t-app Qt typed1 typed2 => \case nf \with {
        | NormalForm.nf b n1 => absurd (n1 (apply_ e1 e2, bred-repl idp))
      }
      | P @ Q, t-app Qt typed1 typed2 =>
        \let
          | rec => leftInS
              P Q
              (Qt ~> t)
              h
              con
              typed1
              (\lam i s => no-con i (sub-app-left s))
              (NormalForm.nf (b-chain-end idp) (\lam (app-red, app-red-b) => \case nf \with {
                | NormalForm.nf b n => n (app-red @ e2, bred-app-left app-red-b idp)
              }))
              each-var-typed
        \in \case rec \with {
          | (t',i,t1) => \case i, typed1 \with {
            | is1 p, (TypedExpr_.t-app Qt2 tP tQ) => absurd (suc/=0 (pmap TDecSet.conNo p))
            | is2 p, (TypedExpr_.t-app Qt2 tP tQ) => absurd (suc/=0 (pmap TDecSet.conNo (TDecSet.rmFunc p).2))
            | is3 p, (TypedExpr_.t-app Qt2 tP tQ) =>
              \let
                | (lft, rght-tmp) => TDecSet.rmFunc p
                | (mid, rght) => TDecSet.rmFunc rght-tmp
              \in (A, is2 (pmap (\lam s => A ~> s) rght), rewriteF mid typed1)
          }
        }

    \func theorema1-lemma (e : Expr_) (h : Nat) (a : Type_) (con : Context_) : ClosedForm e (suc h) (Context_.update-assump (pos h, a) con) =>
      {?}
  }
