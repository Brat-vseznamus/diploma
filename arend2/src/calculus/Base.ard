\import Arith.Nat
\import Data.Bool
\import Logic
\import Paths
\import Paths.Meta
\import Set
\import calculus.AlphaEq
\import calculus.Context
\import calculus.Types
\import math.utils


\data Expr : \Set
  | Con Nat
  | Var Nat
  | Lam Nat Expr
  | App Expr Expr

\data TypedExpr (e : Expr) (t : SimpleType) (c : Context) \elim e, t, c
  | (Con _), t, c => typed-const
  | (Var i), t, c => typed-var (i-exists : Context.typed-var-in-context (i, t) c = true)
  | (Lam i B), (Func a b), c => typed-lam
    (b-exists      : TypedExpr B b (Context.add-assump (i, a) c))
    (i-is-not-free : Context.var-in-context i c = false)
  | (App P Q), t, c => typed-app
    (Qt : SimpleType)
    (p-typed : TypedExpr P (Func Qt t) c)
    (q-typed : TypedExpr Q Qt c)
