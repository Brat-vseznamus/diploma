\import calculus.AlphaEq
\import calculus.Base
\import calculus.Beta
\import calculus.Context
\import calculus.Types

\func EXAMPLE1 : A-Eq (Lam 0 (Lam 1 (Var 0))) (Lam 1 (Lam 0 (Var 1))) => A-Eq.lam-eq (A-Eq.lam-eq (var-eq idp))

\func EXAMPLE2 : Beta-Red (App (Lam 0 (Var 0)) (Var 1)) (Var 1) => beta-repl-right (var-eq idp)
\func EXAMPLE3 : Beta-Red (App (Con 0) (App (Lam 0 (Var 0)) (Var 1))) (App (Con 0) (Var 1)) =>
  beta-app-left (con-eq idp) EXAMPLE2

\func T0 => Base 0
\func T1 => Base 1

-- \x.x : a->a
\func EXAMPLE4 : TypedExpr (Lam 0 (Var 0)) (Func T0 T0) empty => typed-lam (typed-var idp) idp

-- CHUCH
\func Church => Func (Func T0 T0) (Func T0 T0)

-- \f.\x.x
\func zero => Lam 0 (Lam 1 (Var 1))
-- \c.\f.\x. f (C f x)
\func succ => Lam 0 (Lam 1 (Lam 2 (App (Var 1) (App (App (Var 0) (Var 1)) (Var 2)))))
-- \f.\x. f^n x
\func numeral (n : Nat) : Expr \elim n
  | 0 => zero
  | suc n => App succ (numeral n)

\func zeroIsChurch : TypedExpr zero Church empty =>
  typed-lam (typed-lam (typed-var idp) idp) idp

\func succIsCh->Ch : TypedExpr succ (Func Church Church) empty =>
  typed-lam
      (typed-lam
          (typed-lam
              (typed-app
                  T0
                  (typed-var idp)
                  (typed-app
                      T0
                      (typed-app
                          (Func T0 T0)
                          (typed-var idp)
                          (typed-var idp)
                      )
                      (typed-var idp)
                  )
              )
              idp
          )
          idp
      )
      idp

\func numeralIsChurch (n : Nat) : TypedExpr (numeral n) Church empty \elim n
  | 0 => zeroIsChurch
  | suc n => typed-app Church succIsCh->Ch (numeralIsChurch n)

\func repeat (n : Nat) (f : Expr) (x : Expr) : Expr \elim n
  | 0 => x
  | suc n => App f (repeat n f x)

\func numeral2 (n : Nat) : Expr => Lam 0 (Lam 1 (repeat n (Var 0) (Var 1)))

--\func same0 : A-Eq (numeral2 0) zero => lam-eq (lam-eq (var-eq idp))
--\func sameN (n : Nat) : A-Eq (numeral2 n) (numeral n) \elim n
--  | 0 => same0
--  | suc n => \let | sameN-1 => sameN n \in {?}