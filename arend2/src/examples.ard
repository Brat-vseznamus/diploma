\import Arith.Nat
\import Data.Bool
\import Logic
\import Paths
\import Paths.Meta
\import Set
\import calculus.Base
\import calculus.Beta
\import calculus.Context
\import calculus.Types

\func EXAMPLE2 : BetaRed (l (v 0) @ v 0) (v 0) => bred-repl idp
\func EXAMPLE3 : BetaRed (c 0 @ (l (v 0) @ v 1)) (c 0 @ v 1) => bred-app-right idp (bred-repl idp)

\func T0 => Base 0
\func T1 => Base 1

-- \x.x : a->a
\func EXAMPLE4 : TypedExpr_ (l (v 0)) (T0 ~> T0) 0 empty => t-lam (t-var idp)

\func Omega => l (v 0 @ v 0) @ l (v 0 @ v 0)
\func EXAMPLE5 : Not (\Sigma (t : Type_) (TypedExpr_ Omega t 0 empty)) =>
  \lam (t, p) => \case p \with {
    | t-app Qt p-typed q-typed => \case p-typed \with {
      | t-lam b-exists => \case b-exists \with {
        | t-app Qt1 p-typed1 q-typed1 => \case p-typed1, q-typed1 \with {
          | t-var i-exists, t-var i-exists1 =>
            \case
              decideEq Qt Qt1 \as d1,
              decideEq Qt (Qt1 ~> t) \as d2,
              i-exists : decToBool d2 = true,
              i-exists1 : decToBool d1 = true \with {
              | yes e, yes e1, _, _ => contr (rewriteF e e1)
              | no n, yes e, p1, ()
            }
        }
      }
    }
  }
  \where {
    \func contr {t a : Type_} (p : t = t ~> a) : Empty \elim t
      | Base n => suc/=0 (pmap (\lam (x : Type_) => \case x \with {| Base n1 => 1 | s ~> s1 => 0}) p)
      | t1 ~> t2 =>
        \let
          | rec1 => pmap (\lam (x : Type_) => \case x \with {| Base n1 => Base n1 | s ~> s1 => s}) p
          | rec2 => pmap (\lam (x : Type_) => \case x \with {| Base n1 => Base n1 | s ~> s1 => s1}) p
          | rec3 => rewriteF rec2 rec1
        \in contr rec3
  }
